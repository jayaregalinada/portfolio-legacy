{"version":3,"sources":["dashboard/preload.coffee"],"names":["$","$grid","masonry","columnWidth","percentPosition","itemSelector","gutter","imagesLoaded","progress"],"mappings":"AA6DAA,EAAE,WACA,GAAAC,EAAAA,GAAQD,EAAE,SAASE,SACjBC,YAAa,cACbC,iBAAiB,EACjBC,aAAc,aACdC,OAAQ,KAEVL,EAAMM,eAAeC,SAAS,WAC5BP,EAAMC,QAAQ","file":"dashboard/preload.min.js","sourcesContent":["# window._dashboard = angular.module 'd4sh', [\r\n#   'ui.bootstrap'\r\n#   'ngAnimate'\r\n#   'ui.router'\r\n#   'bootstrapLightbox'\r\n#   'LocalStorageModule'\r\n#   'ngMessages'\r\n#   'uiGmapgoogle-maps'\r\n#   'wu.masonry'\r\n#   'textAngular'\r\n#   ]\r\n\r\n# window._dashboard.config ($interpolateProvider, $animateProvider, $httpProvider, LightboxProvider, localStorageServiceProvider)->\r\n\r\n#   $interpolateProvider.startSymbol '{#'\r\n#   $interpolateProvider.endSymbol '#}'\r\n\r\n#   LightboxProvider.getImageUrl = ( image )->\r\n#     image.sizes[0].url\r\n\r\n#   LightboxProvider.getImageCaption = ( image )->\r\n#     image.caption\r\n\r\n#   LightboxProvider.calculateModalDimensions = ( dimensions )->\r\n#     width = Math.max 400, dimensions.imageDisplayWidth - 8\r\n\r\n#     if width >= dimensions.windowWidth - 20 or dimensions.windowWidth < 768\r\n#         width = 'auto'\r\n#     {\r\n#         'width': width\r\n#         'height': 'auto'\r\n#     }\r\n\r\n#   LightboxProvider.templateUrl = 'views/lightbox.html'\r\n\r\n#   localStorageServiceProvider.setPrefix( 'dashboard' )\r\n\r\n#   $animateProvider.classNameFilter /carousel|animate/\r\n\r\n#   $httpProvider.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\"\r\n\r\n#   return\r\n\r\n# window._dashboard.run ($rootScope, $state, $stateParams)->\r\n\r\n#   $rootScope.$state = $state\r\n#   $rootScope.$stateParams = $stateParams\r\n\r\n#   return\r\n\r\n# angular.element(document).ready ->\r\n#   angular.bootstrap(document, ['d4sh'])\r\n\r\n#   $( '[data-toggle=\"tooltip\"]' ).tooltip(\r\n#     container: 'body'\r\n#   )\r\n\r\n#   $( '[data-toggle=\"popover\"]' ).popover()\r\n\r\n#   return\r\n#\r\n$ ->\r\n  $grid = $('.grid').masonry\r\n    columnWidth: '.grid-sizer'\r\n    percentPosition: true\r\n    itemSelector: '.grid-item'\r\n    gutter: 10\r\n\r\n  $grid.imagesLoaded().progress ->\r\n    $grid.masonry 'layout'\r\n\r\n    return\r\n\r\n  return"],"sourceRoot":"/source/"}